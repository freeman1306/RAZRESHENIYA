!function(e,t){var n=function(e,t){"use strict";if(t.getElementsByClassName){var n,a,i=t.documentElement,r=e.Date,s=e.HTMLPictureElement,o="addEventListener",l="getAttribute",c=e[o],d=e.setTimeout,u=e.requestAnimationFrame||d,f=e.requestIdleCallback,m=/^picture$/i,z=["load","error","lazyincluded","_lazyloaded"],y={},h=Array.prototype.forEach,v=function(e,t){return y[t]||(y[t]=new RegExp("(\\s|^)"+t+"(\\s|$)")),y[t].test(e[l]("class")||"")&&y[t]},g=function(e,t){v(e,t)||e.setAttribute("class",(e[l]("class")||"").trim()+" "+t)},p=function(e,t){var n;(n=v(e,t))&&e.setAttribute("class",(e[l]("class")||"").replace(n," "))},C=function(e,t,n){var a=n?o:"removeEventListener";n&&C(e,t),z.forEach(function(n){e[a](n,t)})},b=function(e,a,i,r,s){var o=t.createEvent("Event");return i||(i={}),i.instance=n,o.initEvent(a,!r,!s),o.detail=i,e.dispatchEvent(o),o},A=function(t,n){var i;!s&&(i=e.picturefill||a.pf)?(n&&n.src&&!t[l]("srcset")&&t.setAttribute("srcset",n.src),i({reevaluate:!0,elements:[t]})):n&&n.src&&(t.src=n.src)},E=function(e,t){return(getComputedStyle(e,null)||{})[t]},_=function(e,t,n){for(n=n||e.offsetWidth;n<a.minSize&&t&&!e._lazysizesWidth;)n=t.offsetWidth,t=t.parentNode;return n},w=function(){var e,n,a=[],i=[],r=a,s=function(){var t=r;for(r=a.length?i:a,e=!0,n=!1;t.length;)t.shift()();e=!1},o=function(a,i){e&&!i?a.apply(this,arguments):(r.push(a),n||(n=!0,(t.hidden?d:u)(s)))};return o._lsFlush=s,o}(),M=function(e,t){return t?function(){w(e)}:function(){var t=this,n=arguments;w(function(){e.apply(t,n)})}},N=function(e){var t,n=0,i=a.throttleDelay,s=a.ricTimeout,o=function(){t=!1,n=r.now(),e()},l=f&&s>49?function(){f(o,{timeout:s}),s!==a.ricTimeout&&(s=a.ricTimeout)}:M(function(){d(o)},!0);return function(e){var a;(e=!0===e)&&(s=33),t||(t=!0,(a=i-(r.now()-n))<0&&(a=0),e||a<9?l():d(l,a))}},x=function(e){var t,n,a=function(){t=null,e()},i=function(){var e=r.now()-n;e<99?d(i,99-e):(f||a)(a)};return function(){n=r.now(),t||(t=d(i,99))}};!function(){var t,n={lazyClass:"lazyload",loadedClass:"lazyloaded",loadingClass:"lazyloading",preloadClass:"lazypreload",errorClass:"lazyerror",autosizesClass:"lazyautosizes",srcAttr:"data-src",srcsetAttr:"data-srcset",sizesAttr:"data-sizes",minSize:40,customMedia:{},init:!0,expFactor:1.5,hFac:.8,loadMode:2,loadHidden:!0,ricTimeout:0,throttleDelay:125};for(t in a=e.lazySizesConfig||e.lazysizesConfig||{},n)t in a||(a[t]=n[t]);e.lazySizesConfig=a,d(function(){a.init&&B()})}();var W=function(){var s,u,f,z,y,_,W,B,F,S,L,R,k=/^img$/i,D=/^iframe$/i,H="onscroll"in e&&!/(gle|ing)bot/.test(navigator.userAgent),O=0,P=0,$=-1,I=function(e){P--,(!e||P<0||!e.target)&&(P=0)},q=function(e){return null==R&&(R="hidden"==E(t.body,"visibility")),R||"hidden"!=E(e.parentNode,"visibility")&&"hidden"!=E(e,"visibility")},j=function(e,n){var a,r=e,s=q(e);for(B-=n,L+=n,F-=n,S+=n;s&&(r=r.offsetParent)&&r!=t.body&&r!=i;)(s=(E(r,"opacity")||1)>0)&&"visible"!=E(r,"overflow")&&(a=r.getBoundingClientRect(),s=S>a.left&&F<a.right&&L>a.top-1&&B<a.bottom+1);return s},G=function(){var e,r,o,c,d,f,m,y,h,v,g,p,C=n.elements;if((z=a.loadMode)&&P<8&&(e=C.length)){for(r=0,$++,v=!a.expand||a.expand<1?i.clientHeight>500&&i.clientWidth>500?500:370:a.expand,n._defEx=v,g=v*a.expFactor,p=a.hFac,R=null,O<g&&P<1&&$>2&&z>2&&!t.hidden?(O=g,$=0):O=z>1&&$>1&&P<6?v:0;r<e;r++)if(C[r]&&!C[r]._lazyRace)if(H)if((y=C[r][l]("data-expand"))&&(f=1*y)||(f=O),h!==f&&(_=innerWidth+f*p,W=innerHeight+f,m=-1*f,h=f),o=C[r].getBoundingClientRect(),(L=o.bottom)>=m&&(B=o.top)<=W&&(S=o.right)>=m*p&&(F=o.left)<=_&&(L||S||F||B)&&(a.loadHidden||q(C[r]))&&(u&&P<3&&!y&&(z<3||$<4)||j(C[r],f))){if(Y(C[r]),d=!0,P>9)break}else!d&&u&&!c&&P<4&&$<4&&z>2&&(s[0]||a.preloadAfterLoad)&&(s[0]||!y&&(L||S||F||B||"auto"!=C[r][l](a.sizesAttr)))&&(c=s[0]||C[r]);else Y(C[r]);c&&!d&&Y(c)}},J=N(G),K=function(e){var t=e.target;t._lazyCache?delete t._lazyCache:(I(e),g(t,a.loadedClass),p(t,a.loadingClass),C(t,U),b(t,"lazyloaded"))},Q=M(K),U=function(e){Q({target:e.target})},V=function(e){var t,n=e[l](a.srcsetAttr);(t=a.customMedia[e[l]("data-media")||e[l]("media")])&&e.setAttribute("media",t),n&&e.setAttribute("srcset",n)},X=M(function(e,t,n,i,r){var s,o,c,u,z,y;(z=b(e,"lazybeforeunveil",t)).defaultPrevented||(i&&(n?g(e,a.autosizesClass):e.setAttribute("sizes",i)),o=e[l](a.srcsetAttr),s=e[l](a.srcAttr),r&&(c=e.parentNode,u=c&&m.test(c.nodeName||"")),y=t.firesLoad||"src"in e&&(o||s||u),z={target:e},g(e,a.loadingClass),y&&(clearTimeout(f),f=d(I,2500),C(e,U,!0)),u&&h.call(c.getElementsByTagName("source"),V),o?e.setAttribute("srcset",o):s&&!u&&(D.test(e.nodeName)?function(e,t){try{e.contentWindow.location.replace(t)}catch(n){e.src=t}}(e,s):e.src=s),r&&(o||u)&&A(e,{src:s})),e._lazyRace&&delete e._lazyRace,p(e,a.lazyClass),w(function(){(!y||e.complete&&e.naturalWidth>1)&&(K(z),e._lazyCache=!0,d(function(){"_lazyCache"in e&&delete e._lazyCache},9))},!0)}),Y=function(e){var t,n=k.test(e.nodeName),i=n&&(e[l](a.sizesAttr)||e[l]("sizes")),r="auto"==i;(!r&&u||!n||!e[l]("src")&&!e.srcset||e.complete||v(e,a.errorClass)||!v(e,a.lazyClass))&&(t=b(e,"lazyunveilread").detail,r&&T.updateElem(e,!0,e.offsetWidth),e._lazyRace=!0,P++,X(e,t,r,i,n))},Z=function(){if(!u){if(r.now()-y<999)return void d(Z,999);var e=x(function(){a.loadMode=3,J()});u=!0,a.loadMode=3,J(),c("scroll",function(){3==a.loadMode&&(a.loadMode=2),e()},!0)}};return{_:function(){y=r.now(),n.elements=t.getElementsByClassName(a.lazyClass),s=t.getElementsByClassName(a.lazyClass+" "+a.preloadClass),c("scroll",J,!0),c("resize",J,!0),e.MutationObserver?new MutationObserver(J).observe(i,{childList:!0,subtree:!0,attributes:!0}):(i[o]("DOMNodeInserted",J,!0),i[o]("DOMAttrModified",J,!0),setInterval(J,999)),c("hashchange",J,!0),["focus","mouseover","click","load","transitionend","animationend","webkitAnimationEnd"].forEach(function(e){t[o](e,J,!0)}),/d$|^c/.test(t.readyState)?Z():(c("load",Z),t[o]("DOMContentLoaded",J),d(Z,2e4)),n.elements.length?(G(),w._lsFlush()):J()},checkElems:J,unveil:Y}}(),T=function(){var e,n=M(function(e,t,n,a){var i,r,s;if(e._lazysizesWidth=a,a+="px",e.setAttribute("sizes",a),m.test(t.nodeName||""))for(i=t.getElementsByTagName("source"),r=0,s=i.length;r<s;r++)i[r].setAttribute("sizes",a);n.detail.dataAttr||A(e,n.detail)}),i=function(e,t,a){var i,r=e.parentNode;r&&(a=_(e,r,a),(i=b(e,"lazybeforesizes",{width:a,dataAttr:!!t})).defaultPrevented||(a=i.detail.width)&&a!==e._lazysizesWidth&&n(e,r,i,a))},r=x(function(){var t,n=e.length;if(n)for(t=0;t<n;t++)i(e[t])});return{_:function(){e=t.getElementsByClassName(a.autosizesClass),c("resize",r)},checkElems:r,updateElem:i}}(),B=function(){B.i||(B.i=!0,T._(),W._())};return n={cfg:a,autoSizer:T,loader:W,init:B,uP:A,aC:g,rC:p,hC:v,fire:b,gW:_,rAF:w}}}(e,e.document);e.lazySizes=n,"object"==typeof module&&module.exports&&(module.exports=n)}(window);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
